@startuml
hide empty members
skinparam linetype ortho

class Entry

class LDAPConnectionOptions
{
    QString host
    
    int port
    int version

    QString basedn
    QString username
    QString password

    bool simpleAuth
    bool useSSL
    bool useSASL
    bool useAnonymous
    
    int  timeout

    bool useTLS
    
    QString cacertfile
    QString certfile
    QString keyfile
}

class LDAPDatabase
{
+ LDAPDatabase(const LDAPDatabase &other)
+ LDAPDatabase()
+ LDAPDatabase(const LDAPConnectionOptions& options)
+ LDAPDatabase &	operator=(const LDAPDatabase &other)
+ ~LDAPDatabase()

+ void close()
+ LDAPConnectionOptions connectionOptions() const
}

class LDAPError
{
}

class EntrySearchModelPrivate
{
+ LDAPDatabase& db
+ QVector<Entry> entries

+ EntrySearchModelPrivate(const LDAPDatabase& db = LDAPDatabase())
}

class QAbstractItemModel
{
}

class EntrySearchModel extends QAbstractItemModel
{
+ EntrySearchModel(QObject *parent = nullptr, const QString &query, const LDAPDatabase &db = LDAPDatabase())
+ EntrySearchModel(QObject *parent = nullptr, LDAPQuery& query)

-- Reimplemented Public Functions --
+ bool canFetchMore(const QModelIndex &parent = QModelIndex()) const
+ int columnCount(const QModelIndex &index = QModelIndex()) const
+ QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const
+ void fetchMore(const QModelIndex &parent = QModelIndex())
+ QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const
+ bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex())
+ bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex())
+ QHash<int, QByteArray> 	roleNames() const
+ int rowCount(const QModelIndex &parent = QModelIndex()) const
+ bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole)

-- Public Functions --

+ void clear()
+ LDAPError lastError() const
+ LDAPQuery query() const
+ Entry entry(int row) const
+ Entry entry() const
+ void setQuery(LDAPQuery& query)
+ void setQuery(const QString &query, const LDAPDatabase &db = LDAPDatabase())

--

- QScopedPointer<EntrySearchModelPrivate> d
}

class LDAPTreeModelPrivate
{
+ LDAPDatabase& db
+ QVector<Entry&> topItems

+ LDAPTreeModelPrivate(const LDAPDatabase& db = LDAPDatabase())
}

class LDAPTreeModel extends QAbstractItemModel
{
+ LDAPTreeModel(QObject *parent = nullptr, const LDAPDatabase &db = LDAPDatabase())
+ LDAPTreeModel(QObject *parent = nullptr, const QVector<Entry&> topItems, const LDAPDatabase &db = LDAPDatabase())

+ bool setTopItems(const QVector<Entry&> topItems)

+ QModelIndex addNewEntry(QModelIndex parent, const Entry& entry)
+ bool removeEntry(const Entry& entry)

+ LDAPError lastError() const

-- Reimplemented Public Functions --
+ bool canFetchMore(const QModelIndex &parent) const
+ void clear()
+ bool clearItemData(const QModelIndex &index)
+ int columnCount(const QModelIndex &parent = QModelIndex()) const
+ QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const
+ Qt::ItemFlags	flags(const QModelIndex &index) const
+ void fetchMore(const QModelIndex& parent)
+ bool hasChildren(const QModelIndex &parent) const
+ QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const
+ bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex())
+ bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex())
+ bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex())
+ int rowCount(const QModelIndex &parent = QModelIndex()) const
+ bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole)
+ void sort(int column, Qt::SortOrder order)

-- Public slots --
+ void onRemoveEntry(const QModelIndex& index)

- QScopedPointer<LDAPTreeModelPrivate> d;
}

EntrySearchModel "1" *--> "1" EntrySearchModelPrivate : contains

EntrySearchModel "1" --> "many" Entry

EntrySearchModel "1" --> "1" LDAPError

EntrySearchModelPrivate --> LDAPDatabase : references


LDAPTreeModel "1" *--> "1" LDAPTreeModelPrivate : contains

LDAPTreeModel "1" --> "1" LDAPError

LDAPTreeModel "1" --> "many" Entry

LDAPTreeModelPrivate --> LDAPDatabase : references


LDAPDatabase "1" *--> "1" LDAPConnectionOptions : contains

class Request

class SearchRequest extends Request

note "The EntrySearchModel class provides a read-only data model for LDAP search result." as N1
note "The LDAPTreeModel class provides a read-write data model for LDAP tree." as N2

EntrySearchModel .u. N1
LDAPTreeModel .u. N2

@enduml
